[{
	"title": "02 Prove: Assignment - Homepage ",
	"picture": "img/proves/img02.jpg",
	"content": "<p>The purpose of this assignment is to review a minimal level of client-side programming and provide a homepage from which you can link to future assignments.</p><p>For this assignment you are to create a personal homepage that will be a landing page for you for the rest of the course.</p><p>For this site, you should have at least two pages: first, an introduction to yourself or something you are interested in, and second, a page that will have links to assignments. At this point, the assignments page can say Coming soon or something similar.</p><p>For privacy reasons, you do not need to include personal or identifying information on your homepage. You are welcome to highlight yourself, if you so choose, but we would be just as happy to see something about breast cancer awareness, Pokemon, golf, or wherever your interests lie.</p>",
	"date": "September 28, 2019",
	"author": "CS 313",
	"category": "Prove"
},
{
	"title": "03 Prove: Assignment - Shopping Cart",
	"picture": "img/proves/img03.jpg",
	"content": "<p>The following guidelines are the minimum standard for this assignment (to earn 93%). To earn 100%, you should find a way to go beyond this standard to show your creativity and personality. Have fun and make it your own!</P><P>Your assignment is to create a series of pages that simulate a shopping cart for an online store. The kinds of items you can put in your cart and purchase are totally up to you. But you should have at least the following components:</p><p>Browse Items</p><p>On the browse items page, the user sees a list of items they can add to their cart and purchase. Again, the kind of items and the formatting of this page is up to you.</p><p>You should provide a button or link to add an item to the cart. Doing so should store that item in some way to the session, and then keep the user on the browse page.</p><p>View Cart</p><p>Your browse page should contain a link to view the cart. On the view cart page, the user can see all the items that are in their cart. Provide a way to remove individual items from the cart.</p><p>The view cart page should have a link to return to the browse page for more shopping and a link to continue to the checkout page.</p><p>Checkout</p><p>The checkout page should ask the user for the different components of their address. (No credit card or other purchase information is collected, only an address.)</p><p>It should have the option to complete the purchase or return to the cart.</p><p>Confirmation page</p><p>After completing the purchase from the checkout page, the user is shown a confirmation page. It should display all the items they have just purchased as well as the address to which it will be shipped.</p><p>Make sure to check for malicious injection, especially from free-entry fields like the address.</p><p>No login functionality or databases are required for this assignment.</p>",
	"date": "October 05, 2019",
	"author": "CS 313",
	"category": "Prove"
},
{
	"title": "04 Prove: Assignment - DB Setup",
	"picture": "img/proves/img04.jpg",
	"content": "<p>For this assignment, you need to have the schema in place for your database (e.g., create the tables and the relationships between them). You are not required to have the tables populated with data just yet (although, depending on your application, it might be a good idea to get some of this in place sooner than later).</p><p>Please consider the following guidelines regarding this assignment:</p><p>Create a database on your server.</p><p>Create the tables you will need for your project.</p><p>Choose appropriate data types for each column.</p><p>Ensure that each table has an appropriate primary key.</p><p>Include foreign key constraints wherever possible.</p><p>Eliminate data redundancy wherever possible.<p>Saving your SQL commands</p><p>Please create a directory under your application directory (as a sibling to the web directory) called db and put a text file in that directory called myDb.sql, or something similar. You should put all of the commands necessary to create your database into this file. (You don't want to put this file under the web directory, because you don't want it available to everyone that will view your website.)</p><p>While you can type your SQL commands right into the console, it is usually better to type them into a text editor and copy and paste them into the console. This way, if you have a syntax error, it is much easier to fix the code in another editor and re-copy and paste.</p><p>Also, then when you are done working through your commands, you will have a file with all the SQL commands needed to create your complete database. On projects in industry, you will often see more formality around this process, but you will see the same general practice of having a script that can create the structure of your complete database.</p><p>The submission file below will contain a link to your .sql file.</p>",
	"date": "October 12, 2019",
	"author": "CS 313",
	"category": "Prove"
},
{
	"title": "05 Prove: Assignment - DB Access",
	"picture": "img/proves/img05.jpg",
	"content": "<p>Overview</p><p>Your assignment this week is to complete read-only access to your database from your web application.</p><p>This means that you should have at least some test data in your database, and then have PHP pages in place to query for that data and render it to the user. At this point, you are not required to have functionality to create or update data from your web pages (that is for next week).</p><p>For most of you, this will require creating some forms that allow for querying/browsing your data, and displaying results (not simply having a page that dumps the whole database to the screen). This will likely also require creating and working with sessions to enable the current user's experience.</p><p>In other words, at this point you should have the complete UI framework in place for your pages, with all the navigation links required, and the application should be functional from the perspective of clicking, browsing, and searching. Next week, you will be adding the functionality of adding and updating data.</p><p>The styling may not be perfect at this point, but it should be in-process, and the general layout of the pages should be in place.</p><p>Instructions</p><p>Please submit to I-Learn a brief list of the data that is displayed with links to the site/pages as appropriate, and if necessary, any instructions to see the data. This description need not be long, but rather a simple numbered list containing a single sentence and a link will likely suffice.</p><p>Also, please make sure your latest code is pushed to GitHub!</p><p>Example</p><p>As an example, please consider the following:</p><p>Project Title: Chiropractic Patient And Symptom Tracker</p><p>1. Patient list: A list of all patients in the system, each one is a link that leads to a patient details page. [link here...]</p><p>2. Patient search: A simple form that allows for a last name to be entered, then the patient list will be shown for all patients that match the last name. [link here...]</p><p>3. Patient details: A view of a single patient, showing their contact information, previous chiropractic experience, symptoms, etc. [link here...]</p><p>4. The new patient form: This will be submitted and handled in the next assignment, but for this week, checkboxes are dynamically created based upon what is in the database. [link here...]</p>",
	"date": "October 19, 2019",
	"author": "CS 313",
	"category": "Prove"
},
{
	"title": "06 Prove : Assignment - DB Update",
	"picture": "img/proves/img06.png",
	"content": "<p>Overview</p><p>Your assignment this week is to complete the database modification component of your application. In other words, all the functionality related to inserting new data, updating existing data, and deleting if necessary. To some degree this should complete the application, but you will have one more week to tighten up loose ends and add additional bells and whistles.</p><p>The styling may not be perfect at this point, but it should getting very close, and the general layout of the pages should be solid.</p><p>Instructions</p><p>Please submit to I-Learn a brief list of the data modification components with links to the site/pages as appropriate. If necessary please provide any information that is required to modify the data. For example, you may need to provide a username and password so that I can log in and edit your data.</p><p>This description need not be long, but rather a simple numbered list containing a single sentence and a link will suffice. At the start of the document, please give a short title of your application. Also, please make sure your latest code is pushed to GitHub!</p><p>Example</p><p>As an example, please consider the following:</p><p>Project Title: Family event planning system.</p><p>Login information: username:testAdmin, password:cs313</p><p>1. Create new family: A page for administrators to create new families. [link here...]</p><p>2. Create new user: On this page an administrator can create a new users, specify their role, and add them to an existing family [link here...]</p><p>3. Create a new event: On this page, any user with a creation role, can create new events for their family. [link here...]</p><p>4. Create a new alert: On this page, users can see a list of their events and can can create an alert for it. [link here...]</p>",
	"date": "October 26, 2019",
	"author": "CS 313",
	"category": "Prove"
}]